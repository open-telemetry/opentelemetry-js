{
  "name": "opentelemetry",
  "version": "0.1.0",
  "description": "OpenTelemetry is a distributed tracing and stats collection framework.",
  "scripts": {
    "precompile": "lerna run version && npm run submodule",
    "compile": "lerna run protos:generate && tsc --build tsconfig.json tsconfig.esm.json tsconfig.esnext.json",
    "prewatch": "npm run precompile",
    "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json tsconfig.esnext.json",
    "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json tsconfig.esnext.json",
    "postinstall": "npm run update-ts-configs",
    "submodule": "git submodule sync --recursive && git submodule update --init --recursive",
    "version:update": "lerna run version",
    "test": "lerna run test",
    "test:browser": "lerna run test:browser",
    "test:webworker": "lerna run test:webworker",
    "test:backcompat": "lerna run test:backcompat",
    "test:bench": "lerna run test:bench",
    "changelog": "lerna-changelog",
    "codecov": "lerna run codecov",
    "codecov:browser": "lerna run codecov:browser",
    "codecov:webworker": "lerna run codecov:webworker",
    "predocs-test": "npm run docs",
    "docs": "typedoc --readme none && touch docs/.nojekyll",
    "docs-deploy": "gh-pages --dotfiles --dist docs",
    "docs:test": "linkinator docs --silent --retry && linkinator doc/*.md --skip http://localhost:3000 --skip http://localhost:9464 --silent --retry",
    "lint": "lerna run lint",
    "lint:changed": "lerna run --concurrency 1 --stream lint --since HEAD --exclude-dependents",
    "lint:fix": "lerna run lint:fix",
    "lint:fix:changed": "lerna run --concurrency 1 --stream lint:fix --since HEAD --exclude-dependents",
    "lint:examples": "eslint --no-error-on-unmatched-pattern ./examples/**/*.js",
    "lint:examples:fix": "eslint --no-error-on-unmatched-pattern ./examples/**/*.js --fix",
    "lint:markdown": "markdownlint-cli2 $(git ls-files '*.md')",
    "lint:markdown:fix": "markdownlint-cli2 --fix $(git ls-files '*.md')",
    "reset": "lerna clean -y && rm -rf node_modules && npm i && npm run compile && npm run lint:fix",
    "update-ts-configs": "node scripts/update-ts-configs.js",
    "maint:regenerate-test-certs": "npm run --if-present --workspaces maint:regenerate-test-certs",
    "comment_prepare_1": "echo scripts in this section automatically prepare releases. Intended for use by maintainers only.",
    "comment_prepare_2": "echo experimental preparation scripts only prepare experimental packages",
    "prepare_release:experimental:patch": "npm run _check:no_changes && npm run _backup:package-json && npm run _lerna:remove_api && npm run _lerna:remove_stable && npm run _lerna:version_patch && npm run _restore:package-json && npm run _changelog:prepare_experimental",
    "prepare_release:experimental:minor": "npm run _check:no_changes && npm run _backup:package-json && npm run _lerna:remove_api && npm run _lerna:remove_stable && npm run _lerna:version_minor && npm run _restore:package-json && npm run _changelog:prepare_experimental",
    "comment_prepare_3": "echo sdk preparation scripts prepare all stable and experimental packages",
    "prepare_release:sdk:patch": "npm run _check:no_changes && npm run _backup:package-json && npm run _lerna:remove_api && npm run _lerna:version_patch && npm run _restore:package-json && npm run _changelog:prepare_experimental && npm run _changelog:prepare_stable",
    "prepare_release:sdk:minor": "npm run _check:no_changes && npm run _backup:package-json && npm run _lerna:remove_api && npm run _lerna:version_minor && npm run _restore:package-json && npm run _changelog:prepare_experimental && npm run _changelog:prepare_stable",
    "prepare_release:all:minor": "npm run _check:no_changes && npm run _backup:package-json && npm run _lerna:remove_api && npm run _lerna:version_minor && cd api/ && npm version minor && cd .. && lerna run align-api-deps && npm run _restore:package-json && npm run _changelog:prepare_all",
    "release:publish": "lerna publish from-package --no-push --no-private --no-git-tag-version --no-verify-access",
    "comment_internal": "echo scripts below this line are for internal use",
    "_check:no_changes": "if [ ! -z \"$(git status -uall --porcelain)\" ]; then echo Please ensure all changes are committed; exit 1; fi",
    "_backup:package-json": "cp package.json package.json.backup",
    "_restore:package-json": "mv package.json.backup package.json && npm install --package-lock-only",
    "_lerna:remove_api": "node -e 'var fs=require(\"fs\");var p=require(\"./package.json\");p.workspaces=p.workspaces.filter(p=>p!==\"api\");fs.writeFileSync(\"package.json\",JSON.stringify(p,null,2))'",
    "_lerna:remove_stable": "node -e 'var fs=require(\"fs\");var p=require(\"./package.json\");p.workspaces=p.workspaces.filter(p=>p!==\"packages/*\");fs.writeFileSync(\"package.json\",JSON.stringify(p,null,2))'",
    "_lerna:version_patch": "npx lerna version patch --exact --no-git-tag-version --no-push --yes",
    "_lerna:version_minor": "npx lerna version minor --exact --no-git-tag-version --no-push --yes",
    "_changelog:prepare_experimental": "node scripts/update-changelog.js ./experimental/CHANGELOG.md ./experimental/packages/",
    "_changelog:prepare_stable": "node scripts/update-changelog.js ./CHANGELOG.md ./packages/",
    "_changelog:prepare_api": "node scripts/update-changelog.js ./api/CHANGELOG.md ./api/package.json",
    "_changelog:prepare_all": "npm run _changelog:prepare_api && npm run _changelog:prepare_experimental && npm run _changelog:prepare_stable",
    "_github:draft_release:all": "npm run _github:draft_release:api && _github:draft_release:experimental && _github:draft_release:stable",
    "_github:draft_release:api": "node scripts/extract-latest-release-notes.js ./api/CHANGELOG.md && VERSION=$(node scripts/get-version.js ./api/package.json | grep -oP '^\\d+\\.\\d+\\.\\d+$') && gh release create --draft --notes-file ./.tmp/release-notes.md --target main --title api/v$VERSION api/v$VERSION",
    "_github:draft_release:experimental": "node scripts/extract-latest-release-notes.js ./experimental/CHANGELOG.md && VERSION=$(node scripts/get-version.js ./experimental/packages/ | grep -oP '^\\d+\\.\\d+\\.\\d+$') && gh release create --draft --notes-file ./.tmp/release-notes.md --target main --title experimental/v$VERSION experimental/v$VERSION",
    "_github:draft_release:stable": "node scripts/extract-latest-release-notes.js ./CHANGELOG.md && VERSION=$(node scripts/get-version.js ./packages/ | grep -oP '^\\d+\\.\\d+\\.\\d+$') && gh release create --draft --notes-file ./.tmp/release-notes.md --target main --title v$VERSION v$VERSION",
    "_github:update_release_pr_body_from_file": "gh pr edit $RELEASE_PR_OWNER:release/next-version --body-file ./.tmp/release-notes.md",
    "_github:update_release_pr_body:all": "node scripts/extract-latest-release-notes.js api/CHANGELOG.md ./CHANGELOG.md experimental/CHANGELOG.md && npm run _github:update_release_pr_body_from_file",
    "_github:update_release_pr_body:stable": "node scripts/extract-latest-release-notes.js ./CHANGELOG.md experimental/CHANGELOG.md && npm run _github:update_release_pr_body_from_file",
    "_github:update_release_pr_body:experimental": "node scripts/extract-latest-release-notes.js experimental/CHANGELOG.md && npm run _github:update_release_pr_body_from_file",
    "_verify_release_kind": "echo $RELEASE_KIND | grep -oP '^(all|sdk|experimental):(minor|patch)$'",
    "_verify_release_remote": "git remote get-url $RELEASE_PR_REMOTE",
    "_github:update_release_branch": "npm run _verify_release_kind && npm run _verify_release_remote && (git checkout main && git pull upstream main && git branch -D release/next-version; git checkout -b release/next-version && npm run prepare_release:$RELEASE_KIND && git commit -am \"chore: prepare release\" && git push $RELEASE_PR_REMOTE --force release/next-version)"
  },
  "repository": "open-telemetry/opentelemetry-js",
  "keywords": [
    "opentelemetry",
    "nodejs",
    "profiling",
    "metrics",
    "stats"
  ],
  "author": "OpenTelemetry Authors",
  "license": "Apache-2.0",
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "5.59.11",
    "@typescript-eslint/parser": "5.59.11",
    "assert": "2.1.0",
    "benchmark": "2.1.4",
    "eslint": "8.44.0",
    "eslint-config-prettier": "9.0.0",
    "eslint-plugin-header": "3.1.1",
    "eslint-plugin-node": "11.1.0",
    "eslint-plugin-prettier": "5.0.1",
    "gh-pages": "6.0.0",
    "karma": "6.4.3",
    "karma-chrome-launcher": "3.1.0",
    "karma-coverage": "2.2.1",
    "karma-mocha": "2.0.1",
    "karma-mocha-webworker": "1.3.0",
    "karma-spec-reporter": "0.0.36",
    "karma-webpack": "5.0.1",
    "lerna": "6.6.2",
    "linkinator": "6.0.5",
    "markdownlint-cli2": "0.13.0",
    "prettier": "3.0.3",
    "process": "0.11.10",
    "semver": "7.5.4",
    "typedoc": "0.22.18",
    "typedoc-plugin-missing-exports": "1.0.0",
    "typedoc-plugin-resolve-crossmodule-references": "0.2.2",
    "typescript": "4.4.4",
    "util": "0.12.5"
  },
  "changelog": {
    "repo": "open-telemetry/opentelemetry-js",
    "labels": {
      "breaking": ":boom: Breaking Change",
      "enhancement": ":rocket: (Enhancement)",
      "bug": ":bug: (Bug Fix)",
      "core": ":wrench: Core",
      "document": ":books: (Refine Doc)",
      "feature-request": ":sparkles: (Feature)",
      "internal": ":house: (Internal)"
    },
    "cacheDir": ".changelog"
  },
  "workspaces": [
    "api",
    "packages/*",
    "experimental/packages/*",
    "experimental/examples/*",
    "experimental/backwards-compatibility/*",
    "integration-tests/*",
    "selenium-tests",
    "examples/otlp-exporter-node",
    "examples/opentelemetry-web",
    "examples/http",
    "examples/https",
    "examples/esm-http-ts"
  ]
}
