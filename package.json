{
  "name": "opentelemetry",
  "version": "0.1.0",
  "description": "OpenTelemetry is a distributed tracing and stats collection framework.",
  "scripts": {
    "precompile": "npm run submodule && nx run-many -t protos:generate && nx run-many -t version",
    "compile": "tsc --build tsconfig.json tsconfig.esm.json tsconfig.esnext.json",
    "prewatch": "npm run precompile",
    "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json tsconfig.esnext.json",
    "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json tsconfig.esnext.json",
    "postinstall": "npm run update-ts-configs",
    "submodule": "git submodule sync --recursive && git submodule update --init --recursive",
    "version:update": "nx run-many -t version",
    "test": "nx run-many -t test",
    "test:bundle": "nx run-many -t test:bundle",
    "test:browser": "nx run-many -t test:browser",
    "test:webworker": "nx run-many -t test:webworker",
    "test:backcompat": "nx run-many -t test:backcompat",
    "test:bench": "nx run-many -t test:bench",
    "predocs-test": "npm run docs",
    "docs": "typedoc --readme none && touch docs/.nojekyll",
    "docs-deploy": "gh-pages --dotfiles --dist docs",
    "docs:test": "linkinator docs --silent --retry && linkinator doc/*.md --skip http://localhost:3000 --skip http://localhost:9464 --skip https://github.com/ --skip https://www.npmjs.com/ --silent --retry --directory-listing",
    "lint": "nx run-many -t lint && npm run lint:markdown && npm run lint:semconv-deps",
    "lint:fix": "nx run-many -t lint:fix && nx run-many -t lint:markdown:fix",
    "lint:examples": "eslint --no-error-on-unmatched-pattern ./examples/**/*.js",
    "lint:examples:fix": "eslint --no-error-on-unmatched-pattern ./examples/**/*.js --fix",
    "lint:markdown": "markdownlint-cli2 $(git ls-files '*.md')  # requires Node.js >=20",
    "lint:markdown:fix": "markdownlint-cli2 --fix $(git ls-files '*.md')  # requires Node.js >=20",
    "lint:semconv-deps": "./scripts/lint-semconv-deps.mjs",
    "update-ts-configs": "node scripts/update-ts-configs.js",
    "maint:regenerate-test-certs": "npm run --if-present --workspaces maint:regenerate-test-certs",
    "comment_prepare_1": "echo scripts in this section automatically prepare releases. Intended for use by maintainers only.",
    "prepare_release:experimental": "npm run _check:no_changes && npm run _backup:package-json && npm run _workspace:remove_api && npm run _workspace:remove_semconv && npm run _workspace:remove_stable && npm run _workspace:bump_version && npm run _restore:package-json && npm run _changelog:prepare_experimental",
    "prepare_release:sdk": "npm run _check:no_changes && npm run _backup:package-json && npm run _workspace:remove_api && npm run _workspace:remove_semconv && npm run _workspace:bump_version && npm run _restore:package-json && npm run _changelog:prepare_experimental && npm run _changelog:prepare_stable",
    "prepare_release:semconv": "npm run _check:no_changes && npm run _backup:package-json && npm run _workspace:remove_everything_except_semconv && npm run _workspace:bump_version && npm run _restore:package-json && npm run _changelog:prepare_semconv",
    "prepare_release:all": "npm run _check:no_changes && npm run _backup:package-json && npm run _workspace:remove_api && npm run _workspace:remove_semconv && npm run _workspace:bump_version && cd api/ && npm version $RELEASE_TYPE && cd .. && nx run-many -t align-api-deps && npm run _restore:package-json && npm run _changelog:prepare_all",
    "comment_internal": "echo scripts below this line are for internal use",
    "_check:no_changes": "if [ ! -z \"$(git status -uall --porcelain)\" ]; then echo Please ensure all changes are committed; exit 1; fi",
    "_backup:package-json": "cp package.json package.json.backup",
    "_restore:package-json": "mv package.json.backup package.json && npm install --package-lock-only",
    "_workspace:remove_api": "node -e 'var fs=require(\"fs\");var p=require(\"./package.json\");p.workspaces=p.workspaces.filter(p=>p!==\"api\");fs.writeFileSync(\"package.json\",JSON.stringify(p,null,2))'",
    "_workspace:remove_semconv": "node -e 'var fs=require(\"fs\");var p=require(\"./package.json\");p.workspaces=p.workspaces.filter(p=>p!==\"semantic-conventions\");fs.writeFileSync(\"package.json\",JSON.stringify(p,null,2))'",
    "_workspace:remove_everything_except_semconv": "node -e 'var fs=require(\"fs\");var p=require(\"./package.json\");p.workspaces=p.workspaces.filter(p=>p==\"semantic-conventions\");fs.writeFileSync(\"package.json\",JSON.stringify(p,null,2))'",
    "_workspace:remove_stable": "node -e 'var fs=require(\"fs\");var p=require(\"./package.json\");p.workspaces=p.workspaces.filter(p=>p!==\"packages/*\");fs.writeFileSync(\"package.json\",JSON.stringify(p,null,2))'",
    "_workspace:bump_version": "node scripts/bump-versions.mjs",
    "_changelog:prepare_experimental": "node scripts/update-changelog.js ./experimental/CHANGELOG.md ./experimental/packages/",
    "_changelog:prepare_stable": "node scripts/update-changelog.js ./CHANGELOG.md ./packages/",
    "_changelog:prepare_api": "node scripts/update-changelog.js ./api/CHANGELOG.md ./api/package.json",
    "_changelog:prepare_semconv": "node scripts/update-changelog.js ./semantic-conventions/CHANGELOG.md ./semantic-conventions/package.json",
    "_changelog:prepare_all": "npm run _changelog:prepare_api && npm run _changelog:prepare_experimental && npm run _changelog:prepare_stable",
    "_github:draft_release:all": "npm run _github:draft_release:api && _github:draft_release:experimental && _github:draft_release:stable",
    "_github:draft_release:api": "node scripts/extract-latest-release-notes.js ./api/CHANGELOG.md && VERSION=$(node scripts/get-version.js ./api/package.json | grep -oE '^[0-9]+\\.[0-9]+\\.[0-9]+$') && gh release create --draft --notes-file ./.tmp/release-notes.md --target main --title api/v$VERSION api/v$VERSION",
    "_github:draft_release:experimental": "node scripts/extract-latest-release-notes.js ./experimental/CHANGELOG.md && VERSION=$(node scripts/get-version.js ./experimental/packages/ | grep -oE '^[0-9]+\\.[0-9]+\\.[0-9]+$') && gh release create --draft --notes-file ./.tmp/release-notes.md --target main --title experimental/v$VERSION experimental/v$VERSION",
    "_github:draft_release:stable": "node scripts/extract-latest-release-notes.js ./CHANGELOG.md && VERSION=$(node scripts/get-version.js ./packages/ | grep -oE '^[0-9]+\\.[0-9]+\\.[0-9]+$') && gh release create --draft --notes-file ./.tmp/release-notes.md --target main --title v$VERSION v$VERSION",
    "_github:draft_release:semconv": "node scripts/extract-latest-release-notes.js ./semantic-conventions/CHANGELOG.md && VERSION=$(node scripts/get-version.js ./semantic-conventions/package.json | grep -oE '^[0-9]+\\.[0-9]+\\.[0-9]+$') && gh release create --draft --notes-file ./.tmp/release-notes.md --target main --title semconv/v$VERSION semconv/v$VERSION",
    "_github:update_release_pr_body_from_file": "gh pr edit --repo open-telemetry/opentelemetry-js $RELEASE_PR_OWNER:otelbot/prepare-next-version --body-file ./.tmp/release-notes.md",
    "_github:update_release_pr_body:all": "node scripts/extract-latest-release-notes.js api/CHANGELOG.md ./CHANGELOG.md experimental/CHANGELOG.md && npm run _github:update_release_pr_body_from_file",
    "_github:update_release_pr_body:sdk": "node scripts/extract-latest-release-notes.js ./CHANGELOG.md experimental/CHANGELOG.md && npm run _github:update_release_pr_body_from_file",
    "_github:update_release_pr_body:experimental": "node scripts/extract-latest-release-notes.js experimental/CHANGELOG.md && npm run _github:update_release_pr_body_from_file",
    "_github:update_release_pr_body:semconv": "node scripts/extract-latest-release-notes.js semantic-conventions/CHANGELOG.md && npm run _github:update_release_pr_body_from_file",
    "_verify_release_kind": "echo $RELEASE_SCOPE | grep -oE '^(all|sdk|experimental|semconv)$'",
    "_verify_release_type": "echo $RELEASE_TYPE | grep -oE '^(minor|patch)$'",
    "_verify_release_remote": "git remote get-url $RELEASE_PR_REMOTE",
    "_github:update_release_branch": "npm run _verify_release_kind && npm run _verify_release_type && npm run _verify_release_remote && (git checkout main && git pull $RELEASE_PR_REMOTE main && git branch -D otelbot/prepare-next-version; git checkout -b otelbot/prepare-next-version && npm run prepare_release:$RELEASE_SCOPE && git commit -am \"chore: prepare release\" && git push --set-upstream $RELEASE_PR_REMOTE --force otelbot/prepare-next-version)",
    "github:create_or_update_release_pr": "npm run _github:update_release_branch && (gh pr create --repo open-telemetry/opentelemetry-js --title 'chore: prepare next release' --body ''; npm run _github:update_release_pr_body:$RELEASE_SCOPE)"
  },
  "repository": "open-telemetry/opentelemetry-js",
  "keywords": [
    "opentelemetry",
    "nodejs",
    "profiling",
    "metrics",
    "stats"
  ],
  "author": "OpenTelemetry Authors",
  "license": "Apache-2.0",
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "8.41.0",
    "@typescript-eslint/parser": "8.41.0",
    "assert": "2.1.0",
    "benchmark": "2.1.4",
    "eslint": "8.57.1",
    "eslint-config-prettier": "10.1.8",
    "eslint-plugin-header": "3.1.1",
    "eslint-plugin-n": "14.0.0",
    "eslint-plugin-prettier": "5.5.4",
    "gh-pages": "6.3.0",
    "glob": "^11.0.0",
    "karma": "6.4.4",
    "karma-chrome-launcher": "3.1.0",
    "karma-coverage": "2.2.1",
    "karma-mocha": "2.0.1",
    "karma-mocha-webworker": "1.3.0",
    "karma-spec-reporter": "0.0.36",
    "karma-webpack": "5.0.1",
    "lerna": "9.0.0",
    "linkinator": "6.1.4",
    "markdownlint-cli2": "0.18.1",
    "prettier": "3.6.2",
    "process": "0.11.10",
    "nx": "20.8.2",
    "semver": "7.7.2",
    "ts-node": "10.9.2",
    "typedoc": "0.27.9",
    "typedoc-plugin-missing-exports": "3.1.0",
    "typescript": "5.0.4",
    "util": "0.12.5"
  },
  "workspaces": [
    "api",
    "packages/*",
    "semantic-conventions",
    "e2e-tests",
    "experimental/packages/*",
    "experimental/examples/*",
    "experimental/backwards-compatibility/*",
    "integration-tests/*",
    "examples/otlp-exporter-node",
    "examples/opentelemetry-web",
    "examples/http",
    "examples/https",
    "examples/esm-http-ts",
    "bundler-tests/browser/*"
  ]
}
