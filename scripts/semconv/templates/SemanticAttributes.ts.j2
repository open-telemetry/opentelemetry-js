/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{%- macro print_value(type, value) -%}
  {{ "'" if type == "string"}}{{value}}{{ "'" if type == "string"}}
{%- endmacro %}

//----------------------------------------------------------------------------------------------------------
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/{{template}}
//----------------------------------------------------------------------------------------------------------

{%- set filtered_attributes = attributes | select(filter) | list %}
{%- set filtered_metrics = metrics | select(filter) | list %}

{%- for metric in filtered_metrics %}

/**
* {% filter escape %}{{metric.brief | to_doc_brief | replace("\n", "\n* ") }}.{% endfilter %}
  {%- if metric.note %}
*
* Note: {% filter escape %}{{metric.note | to_doc_brief | replace("\n", "\n* ") }}.{% endfilter %}
  {%- endif %}
  {%- if (metric.stability | string()) != "StabilityLevel.STABLE" %}
 *
 * @experimental This metric is experimental and is subject to change in minor releases of `@opentelemetry/semantic-conventions`.
  {%- endif %}
  {%- if metric.deprecated %}
*
* @deprecated {{metric.deprecated | to_doc_brief | replace("\n", "\n* ") }}.
  {%- endif %}
*/
export const METRIC_{{metric.metric_name | to_const_name}} = {{ print_value ("string", metric.metric_name) }};

{%- endfor %}

{%- for attribute in filtered_attributes if attribute.is_local and not attribute.ref %}

/**
* {% filter escape %}{{attribute.brief | to_doc_brief | replace("\n", "\n* ") }}.{% endfilter %}
  {%- if attribute.note %}
*
* Note: {% filter escape %}{{attribute.note | to_doc_brief | replace("\n", "\n* ") }}.{% endfilter %}
  {%- endif %}
  {%- if (attribute.stability | string()) != "StabilityLevel.STABLE" %}
 *
 * @experimental This attribute is experimental and is subject to change in minor releases of `@opentelemetry/semantic-conventions`.
  {%- endif %}
  {%- if attribute.deprecated %}
*
* @deprecated {{attribute.deprecated | to_doc_brief | replace("\n", "\n* ") }}.
  {%- endif %}
*/
export const ATTR_{{attribute.fqn | to_const_name}} = {{ print_value ("string", attribute.fqn) }};

{%- endfor %}

{%- for attribute in filtered_attributes if attribute.is_local and not attribute.ref %}
{%- if attribute.is_enum %}
{%- set class_name = attribute.fqn | to_const_name ~ "_VALUE" %}
{%- set type = attribute.attr_type.enum_type %}

{%- if attribute.attr_type.members is defined and attribute.attr_type.members|length > 0 %}

{%- for member in attribute.attr_type.members if attribute.is_local and not attribute.ref %}

/**
 * Enum value {{ print_value(type, member.value) }} for attribute {@link ATTR_{{ attribute.fqn | to_const_name }}}.
  {%- if (attribute.stability | string()) != "StabilityLevel.STABLE" %}
 *
 * @experimental This attribute is experimental and is subject to change in minor releases of `@opentelemetry/semantic-conventions`.
  {%- endif %}
  {%- if attribute.deprecated %}
 *
 * @deprecated {{attribute.deprecated | to_doc_brief | replace("\n", "\n* ") }}.
  {%- endif %}
 */
export const {{class_name}}_{{ member.member_id | to_const_name }} = {{ print_value(type, member.value) }};

{%- endfor %}

{% endif %}
{% endif %}

{%- endfor %}
