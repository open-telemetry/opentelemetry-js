/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { createConstMap } from '../internal/utils';

{%- macro print_value(type, value) -%}
  {{ "'" if type == "string"}}{{value}}{{ "'" if type == "string"}}
{%- endmacro %}
{%- macro upFirst(text) -%}
  {{ text[0]|upper}}{{text[1:] }}
{%- endmacro %}
{%- macro lowerFirst(text) -%}
  {{ text[0]|lower}}{{text[1:] }}
{%- endmacro %}
{%- macro normalizeName(value) -%}
  {{ value.replace('.', '_') | upper }}
{%- endmacro %}

//----------------------------------------------------------------------------------------------------------
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/{{template}}
//----------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------
// Constant values for {{class}}
//----------------------------------------------------------------------------------------------------------

// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
{%- for attribute in attributes if attribute.is_local and not attribute.ref %}
const TMP_{{attribute.fqn | to_const_name}} = {{ print_value ("string", attribute.fqn) }};
{%- endfor %}

{%- for attribute in attributes if attribute.is_local and not attribute.ref %}

/**
* {% filter escape %}{{attribute.brief | to_doc_brief}}.{% endfilter %}
  {%- if attribute.note %}
*
* Note: {% filter escape %}{{attribute.note | to_doc_brief}}.{% endfilter %}
  {%- endif %}
  {%- if attribute.deprecated %}
*
* @deprecated {{attribute.deprecated | to_doc_brief}}.
  {%- endif %}
*/
export const {{cls_prefix}}_{{attribute.fqn | to_const_name}} = TMP_{{attribute.fqn | to_const_name}};

{%- endfor %}

/**
 * Definition of available values for {{class}}
 * This type is used for backward compatibility, you should use the individual exported
 * constants {{class}}_XXXXX rather than the exported constant map. As any single reference
 * to a constant map value will result in all strings being included into your bundle.
 * @deprecated Use the {{cls_prefix}}_XXXXX constants rather than the {{class}}.XXXXX for bundle minification.
 */
export type {{class}} = {
  {%- for attribute in attributes if attribute.is_local and not attribute.ref %}

  /**
  * {% filter escape %}{{attribute.brief | to_doc_brief}}.{% endfilter %}
    {%- if attribute.note %}
  *
  * Note: {% filter escape %}{{attribute.note | to_doc_brief}}.{% endfilter %}
    {%- endif %}
    {%- if attribute.deprecated %}
  *
  * @deprecated {{attribute.deprecated | to_doc_brief}}.
    {%- endif %}
  */
  {{attribute.fqn | to_const_name}}: '{{attribute.fqn}}',
  {%- endfor %}
};

/**
 * Create exported Value Map for {{class}} values
 * @deprecated Use the {{cls_prefix}}_XXXXX constants rather than the {{class}}.XXXXX for bundle minification
 */
export const {{class}}:{{class}} = /*#__PURE__*/createConstMap<{{class}}>([
  {%- for attribute in attributes if attribute.is_local and not attribute.ref %}
  TMP_{{attribute.fqn | to_const_name}},
  {%- endfor %}
]);

{%- for attribute in attributes if attribute.is_local and not attribute.ref %}
{%- if attribute.is_enum %}
{%- set class_name = attribute.fqn | to_camelcase(True) ~ "Values" %}
{%- set type = attribute.attr_type.enum_type %}

{%- if attribute.attr_type.members is defined and attribute.attr_type.members|length > 0 %}

/* ----------------------------------------------------------------------------------------------------------
 * Constant values for {{class_name}} enum definition
 *
 * {% filter escape %}{{attribute.brief | to_doc_brief}}.{% endfilter %}
  {%- if attribute.note %}
 *
 * Note: {% filter escape %}{{attribute.note | to_doc_brief}}.{% endfilter %}
  {%- endif %}
  {%- if attribute.deprecated %}
 *
 * @deprecated {{attribute.deprecated | to_doc_brief}}.
  {%- endif %}
 * ---------------------------------------------------------------------------------------------------------- */

// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
{%- for member in attribute.attr_type.members if attribute.is_local and not attribute.ref %}
const TMP_{{class_name|upper}}_{{ member.member_id | to_const_name }} = {{ print_value(type, member.value) }};
{%- endfor %}

{%- for member in attribute.attr_type.members if attribute.is_local and not attribute.ref %}

/**
 * {% filter escape %}{{attribute.brief | to_doc_brief}}.{% endfilter %}
  {%- if attribute.note %}
 *
 * Note: {% filter escape %}{{attribute.note | to_doc_brief}}.{% endfilter %}
  {%- endif %}
  {%- if attribute.deprecated %}
 *
 * @deprecated {{attribute.deprecated | to_doc_brief}}.
  {%- endif %}
 */
export const {{class_name|upper}}_{{ member.member_id | to_const_name }} = TMP_{{class_name|upper}}_{{ member.member_id | to_const_name }};

{%- endfor %}

/**
 * Identifies the Values for {{class_name}} enum definition
 *
 * {% filter escape %}{{attribute.brief | to_doc_brief}}.{% endfilter %}
 {%- if attribute.note %}
 *
 * Note: {% filter escape %}{{attribute.note | to_doc_brief}}.{% endfilter %}
 {%- endif %}
 {%- if attribute.deprecated %}
 *
 * @deprecated {{attribute.deprecated | to_doc_brief}}.  Use the {{class_name | upper}}_XXXXX constants rather than the {{class_name}}.XXXXX for bundle minification.
 {%- else %}
 * @deprecated Use the {{class_name | upper}}_XXXXX constants rather than the {{class_name}}.XXXXX for bundle minification.
 {%- endif %}
 */
export type {{class_name}} = {
  {%- for member in attribute.attr_type.members if attribute.is_local and not attribute.ref %}

  /** {% filter escape %}{{member.brief | to_doc_brief}}.{% endfilter %} */
  {{ member.member_id | to_const_name }}: {{ print_value(type, member.value) }},
  {%- endfor %}
}

{%- set enumMap = namespace(useCreateConst = false) %}
{%- if type == "string" %}
  {%- set enumMap.useCreateConst = true %}
  {%- for member in attribute.attr_type.members if attribute.is_local and not attribute.ref %}
    {%- if (member.member_id | to_const_name) != ( member.value | to_const_name) %}
      {%- set enumMap.useCreateConst = false %}
    {%- endif %}
  {%- endfor %}
{%- endif %}

/**
 * The constant map of values for {{class_name}}.
 * @deprecated Use the {{class_name | upper}}_XXXXX constants rather than the {{class_name}}.XXXXX for bundle minification.
 */
{%- if enumMap.useCreateConst == true %}
export const {{class_name}}:{{class_name}} = /*#__PURE__*/createConstMap<{{class_name}}>([
{%- for member in attribute.attr_type.members if attribute.is_local and not attribute.ref %}
  {%- if (member.member_id | to_const_name) == ( member.value | to_const_name) %}
  TMP_{{class_name|upper}}_{{ member.member_id | to_const_name }},
  {%- else %}
  {#- Cause some invalid content to be generated to force a build error #}
  !! Invalid mapping for {{class_name}}.{{ member.member_id }}:{{ member.value }}.  The value is not a valid string.
  {{ member.member_id | to_const_name }}: TMP_{{class_name|upper}}_{{ member.member_id | to_const_name }},
  {%- endif %}
{%- endfor %}
]);
{%- else %}
export const {{class_name}}:{{class_name}} = {
{%- for member in attribute.attr_type.members if attribute.is_local and not attribute.ref %}
  {{ member.member_id | to_const_name }}: TMP_{{class_name|upper}}_{{ member.member_id | to_const_name }},
{%- endfor %}
};
{%- endif %}
{% endif %}
{% endif %}

{%- endfor %}
