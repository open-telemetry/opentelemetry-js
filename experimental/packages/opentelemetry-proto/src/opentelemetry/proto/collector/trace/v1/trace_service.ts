/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: opentelemetry/proto/collector/trace/v1/trace_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 *  */
import * as dependency_1 from "./../../../trace/v1/trace";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace opentelemetry.proto.collector.trace.v1 {
    export class ExportTraceServiceRequest extends pb_1.Message {
        constructor(data?: any[] | {
            resource_spans?: dependency_1.opentelemetry.proto.trace.v1.ResourceSpans[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resource_spans" in data && data.resource_spans != undefined) {
                    this.resource_spans = data.resource_spans;
                }
            }
        }
        get resource_spans() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.opentelemetry.proto.trace.v1.ResourceSpans, 1) as dependency_1.opentelemetry.proto.trace.v1.ResourceSpans[];
        }
        set resource_spans(value: dependency_1.opentelemetry.proto.trace.v1.ResourceSpans[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            resource_spans?: ReturnType<typeof dependency_1.opentelemetry.proto.trace.v1.ResourceSpans.prototype.toObject>[];
        }) {
            const message = new ExportTraceServiceRequest({});
            if (data.resource_spans != null) {
                message.resource_spans = data.resource_spans.map(item => dependency_1.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                resource_spans?: ReturnType<typeof dependency_1.opentelemetry.proto.trace.v1.ResourceSpans.prototype.toObject>[];
            } = {};
            if (this.resource_spans != null) {
                data.resource_spans = this.resource_spans.map((item: dependency_1.opentelemetry.proto.trace.v1.ResourceSpans) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.resource_spans !== undefined)
                writer.writeRepeatedMessage(1, this.resource_spans, (item: dependency_1.opentelemetry.proto.trace.v1.ResourceSpans) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportTraceServiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportTraceServiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.resource_spans, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.opentelemetry.proto.trace.v1.ResourceSpans.deserialize(reader), dependency_1.opentelemetry.proto.trace.v1.ResourceSpans));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportTraceServiceRequest {
            return ExportTraceServiceRequest.deserialize(bytes);
        }
    }
    export class ExportTraceServiceResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new ExportTraceServiceResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportTraceServiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportTraceServiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportTraceServiceResponse {
            return ExportTraceServiceResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTraceServiceService {
        static definition = {
            Export: {
                path: "/opentelemetry.proto.collector.trace.v1.TraceService/Export",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExportTraceServiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExportTraceServiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExportTraceServiceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExportTraceServiceResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Export(call: grpc_1.ServerUnaryCall<ExportTraceServiceRequest, ExportTraceServiceResponse>, callback: grpc_1.sendUnaryData<ExportTraceServiceResponse>): void;
    }
    export class TraceServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTraceServiceService.definition, "TraceService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options)
        }
        Export: GrpcUnaryServiceInterface<ExportTraceServiceRequest, ExportTraceServiceResponse> = (message: ExportTraceServiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExportTraceServiceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExportTraceServiceResponse>, callback?: grpc_1.requestCallback<ExportTraceServiceResponse>): grpc_1.ClientUnaryCall => {
            return super.Export(message, metadata, options, callback);
        };
    }
}
