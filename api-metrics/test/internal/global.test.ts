/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as assert from 'assert';
import { getGlobal } from '../../src/internal/global-utils';
import { _globalThis } from '../../src/platform';
import { NoopMeterProvider } from '../../src/NoopMeterProvider';
import sinon = require('sinon');
import { diag } from '@opentelemetry/api';

const api1 = require('../../src') as typeof import('../../src');

// clear cache and load a second instance of the api
for (const key of Object.keys(require.cache)) {
  delete require.cache[key];
}
const api2 = require('../../src') as typeof import('../../src');

// This will need to be changed manually on major version changes.
// It is intentionally not autogenerated to ensure the author of the change is aware of what they are doing.
const GLOBAL_METRICS_API_SYMBOL_KEY = 'opentelemetry.js.api.metrics.1';

const getMockLogger = () => ({
  verbose: sinon.spy(),
  debug: sinon.spy(),
  info: sinon.spy(),
  warn: sinon.spy(),
  error: sinon.spy(),
});

describe('Global Utils', () => {
  // prove they are separate instances
  assert.notEqual(api1, api2);
  // that return separate noop instances to start
  assert.notStrictEqual(
    api1.metrics.getMeterProvider(),
    api2.metrics.getMeterProvider(),
  );

  beforeEach(() => {
    api1.metrics.disable();
    // @ts-expect-error we are modifying internals for testing purposes here
    delete _globalThis[Symbol.for(GLOBAL_METRICS_API_SYMBOL_KEY)];
  });

  it('should change the global meter provider', () => {
    const original = api1.metrics.getMeterProvider();
    const newMeterProvider = new NoopMeterProvider();
    api1.metrics.setGlobalMeterProvider(newMeterProvider);
    assert.notStrictEqual(api1.metrics.getMeterProvider(), original);
    assert.strictEqual(api1.metrics.getMeterProvider(), newMeterProvider);
  });

  it('should load an instance from one which was set in the other', () => {
    api1.metrics.setGlobalMeterProvider(new NoopMeterProvider());
    assert.strictEqual(
      api1.metrics.getMeterProvider(),
      api2.metrics.getMeterProvider()
    );
  });

  it('should disable both if one is disabled', () => {
    const manager = new NoopMeterProvider();
    api1.metrics.setGlobalMeterProvider(manager);

    assert.strictEqual(manager, api1.metrics.getMeterProvider());
    api2.metrics.disable();
    assert.notStrictEqual(manager, api1.metrics.getMeterProvider());
  });

  it('should return the module NoOp implementation if the version is a mismatch', () => {
    const newMeterProvider = new NoopMeterProvider();
    api1.metrics.setGlobalMeterProvider(newMeterProvider);

    // ensure new meter provider is returned
    assert.strictEqual(api1.metrics.getMeterProvider(), newMeterProvider);

    const globalInstance = getGlobal('metrics');
    assert.ok(globalInstance);
    // @ts-expect-error we are modifying internals for testing purposes here
    _globalThis[Symbol.for(GLOBAL_METRICS_API_SYMBOL_KEY)].version = '0.0.1';

    // ensure new meter provider is not returned because version above is incompatible
    assert.notStrictEqual(
      api1.metrics.getMeterProvider(),
      newMeterProvider
    );
  });

  it('should log an error if there is a duplicate registration', () => {
    const logger = getMockLogger();
    diag.setLogger(logger);

    api1.metrics.setGlobalMeterProvider(new NoopMeterProvider());
    api1.metrics.setGlobalMeterProvider(new NoopMeterProvider());

    sinon.assert.calledOnce(logger.error);
    assert.strictEqual(logger.error.firstCall.args.length, 1);
    assert.ok(
      logger.error.firstCall.args[0].startsWith(
        'Error: @opentelemetry/api: Attempted duplicate registration of API: metrics'
      )
    );
  });
});
