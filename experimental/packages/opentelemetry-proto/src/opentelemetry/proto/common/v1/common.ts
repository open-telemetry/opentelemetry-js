/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: opentelemetry/proto/common/v1/common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 *  */
import * as pb_1 from "google-protobuf";
export namespace opentelemetry.proto.common.v1 {
    export class AnyValue extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            string_value?: string;
            bool_value?: never;
            int_value?: never;
            double_value?: never;
            array_value?: never;
            kvlist_value?: never;
            bytes_value?: never;
        } | {
            string_value?: never;
            bool_value?: boolean;
            int_value?: never;
            double_value?: never;
            array_value?: never;
            kvlist_value?: never;
            bytes_value?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: number;
            double_value?: never;
            array_value?: never;
            kvlist_value?: never;
            bytes_value?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            double_value?: number;
            array_value?: never;
            kvlist_value?: never;
            bytes_value?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            double_value?: never;
            array_value?: ArrayValue;
            kvlist_value?: never;
            bytes_value?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            double_value?: never;
            array_value?: never;
            kvlist_value?: KeyValueList;
            bytes_value?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            double_value?: never;
            array_value?: never;
            kvlist_value?: never;
            bytes_value?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1, 2, 3, 4, 5, 6, 7]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("string_value" in data && data.string_value != undefined) {
                    this.string_value = data.string_value;
                }
                if ("bool_value" in data && data.bool_value != undefined) {
                    this.bool_value = data.bool_value;
                }
                if ("int_value" in data && data.int_value != undefined) {
                    this.int_value = data.int_value;
                }
                if ("double_value" in data && data.double_value != undefined) {
                    this.double_value = data.double_value;
                }
                if ("array_value" in data && data.array_value != undefined) {
                    this.array_value = data.array_value;
                }
                if ("kvlist_value" in data && data.kvlist_value != undefined) {
                    this.kvlist_value = data.kvlist_value;
                }
                if ("bytes_value" in data && data.bytes_value != undefined) {
                    this.bytes_value = data.bytes_value;
                }
            }
        }
        get string_value() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set string_value(value: string) {
            pb_1.Message.setOneofField(this, 1, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get bool_value() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set bool_value(value: boolean) {
            pb_1.Message.setOneofField(this, 2, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get int_value() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set int_value(value: number) {
            pb_1.Message.setOneofField(this, 3, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get double_value() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set double_value(value: number) {
            pb_1.Message.setOneofField(this, 4, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get array_value() {
            return pb_1.Message.getWrapperField(this, ArrayValue, 5) as ArrayValue;
        }
        set array_value(value: ArrayValue) {
            pb_1.Message.setOneofWrapperField(this, 5, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get kvlist_value() {
            return pb_1.Message.getWrapperField(this, KeyValueList, 6) as KeyValueList;
        }
        set kvlist_value(value: KeyValueList) {
            pb_1.Message.setOneofWrapperField(this, 6, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get bytes_value() {
            return pb_1.Message.getField(this, 7) as Uint8Array;
        }
        set bytes_value(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 7, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get value() {
            const cases: {
                [index: number]: "none" | "string_value" | "bool_value" | "int_value" | "double_value" | "array_value" | "kvlist_value" | "bytes_value";
            } = {
                0: "none",
                1: "string_value",
                2: "bool_value",
                3: "int_value",
                4: "double_value",
                5: "array_value",
                6: "kvlist_value",
                7: "bytes_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            string_value?: string;
            bool_value?: boolean;
            int_value?: number;
            double_value?: number;
            array_value?: ReturnType<typeof ArrayValue.prototype.toObject>;
            kvlist_value?: ReturnType<typeof KeyValueList.prototype.toObject>;
            bytes_value?: Uint8Array;
        }) {
            const message = new AnyValue({});
            if (data.string_value != null) {
                message.string_value = data.string_value;
            }
            if (data.bool_value != null) {
                message.bool_value = data.bool_value;
            }
            if (data.int_value != null) {
                message.int_value = data.int_value;
            }
            if (data.double_value != null) {
                message.double_value = data.double_value;
            }
            if (data.array_value != null) {
                message.array_value = ArrayValue.fromObject(data.array_value);
            }
            if (data.kvlist_value != null) {
                message.kvlist_value = KeyValueList.fromObject(data.kvlist_value);
            }
            if (data.bytes_value != null) {
                message.bytes_value = data.bytes_value;
            }
            return message;
        }
        toObject() {
            const data: {
                string_value?: string;
                bool_value?: boolean;
                int_value?: number;
                double_value?: number;
                array_value?: ReturnType<typeof ArrayValue.prototype.toObject>;
                kvlist_value?: ReturnType<typeof KeyValueList.prototype.toObject>;
                bytes_value?: Uint8Array;
            } = {};
            if (this.string_value != null) {
                data.string_value = this.string_value;
            }
            if (this.bool_value != null) {
                data.bool_value = this.bool_value;
            }
            if (this.int_value != null) {
                data.int_value = this.int_value;
            }
            if (this.double_value != null) {
                data.double_value = this.double_value;
            }
            if (this.array_value != null) {
                data.array_value = this.array_value.toObject();
            }
            if (this.kvlist_value != null) {
                data.kvlist_value = this.kvlist_value.toObject();
            }
            if (this.bytes_value != null) {
                data.bytes_value = this.bytes_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.string_value === "string" && this.string_value.length)
                writer.writeString(1, this.string_value);
            if (this.bool_value !== undefined)
                writer.writeBool(2, this.bool_value);
            if (this.int_value !== undefined)
                writer.writeInt64(3, this.int_value);
            if (this.double_value !== undefined)
                writer.writeDouble(4, this.double_value);
            if (this.array_value !== undefined)
                writer.writeMessage(5, this.array_value, () => this.array_value.serialize(writer));
            if (this.kvlist_value !== undefined)
                writer.writeMessage(6, this.kvlist_value, () => this.kvlist_value.serialize(writer));
            if (this.bytes_value !== undefined)
                writer.writeBytes(7, this.bytes_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnyValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnyValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.string_value = reader.readString();
                        break;
                    case 2:
                        message.bool_value = reader.readBool();
                        break;
                    case 3:
                        message.int_value = reader.readInt64();
                        break;
                    case 4:
                        message.double_value = reader.readDouble();
                        break;
                    case 5:
                        reader.readMessage(message.array_value, () => message.array_value = ArrayValue.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.kvlist_value, () => message.kvlist_value = KeyValueList.deserialize(reader));
                        break;
                    case 7:
                        message.bytes_value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AnyValue {
            return AnyValue.deserialize(bytes);
        }
    }
    export class ArrayValue extends pb_1.Message {
        constructor(data?: any[] | {
            values?: AnyValue[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get values() {
            return pb_1.Message.getRepeatedWrapperField(this, AnyValue, 1) as AnyValue[];
        }
        set values(value: AnyValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            values?: ReturnType<typeof AnyValue.prototype.toObject>[];
        }) {
            const message = new ArrayValue({});
            if (data.values != null) {
                message.values = data.values.map(item => AnyValue.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                values?: ReturnType<typeof AnyValue.prototype.toObject>[];
            } = {};
            if (this.values != null) {
                data.values = this.values.map((item: AnyValue) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values !== undefined)
                writer.writeRepeatedMessage(1, this.values, (item: AnyValue) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArrayValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArrayValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AnyValue.deserialize(reader), AnyValue));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArrayValue {
            return ArrayValue.deserialize(bytes);
        }
    }
    export class KeyValueList extends pb_1.Message {
        constructor(data?: any[] | {
            values?: KeyValue[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get values() {
            return pb_1.Message.getRepeatedWrapperField(this, KeyValue, 1) as KeyValue[];
        }
        set values(value: KeyValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            values?: ReturnType<typeof KeyValue.prototype.toObject>[];
        }) {
            const message = new KeyValueList({});
            if (data.values != null) {
                message.values = data.values.map(item => KeyValue.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                values?: ReturnType<typeof KeyValue.prototype.toObject>[];
            } = {};
            if (this.values != null) {
                data.values = this.values.map((item: KeyValue) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values !== undefined)
                writer.writeRepeatedMessage(1, this.values, (item: KeyValue) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyValueList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyValueList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 1, KeyValue.deserialize(reader), KeyValue));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeyValueList {
            return KeyValueList.deserialize(bytes);
        }
    }
    export class KeyValue extends pb_1.Message {
        constructor(data?: any[] | {
            key?: string;
            value?: AnyValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getWrapperField(this, AnyValue, 2) as AnyValue;
        }
        set value(value: AnyValue) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            key?: string;
            value?: ReturnType<typeof AnyValue.prototype.toObject>;
        }) {
            const message = new KeyValue({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = AnyValue.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value?: ReturnType<typeof AnyValue.prototype.toObject>;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.key === "string" && this.key.length)
                writer.writeString(1, this.key);
            if (this.value !== undefined)
                writer.writeMessage(2, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.value, () => message.value = AnyValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeyValue {
            return KeyValue.deserialize(bytes);
        }
    }
    export class StringKeyValue extends pb_1.Message {
        constructor(data?: any[] | {
            key?: string;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: string;
            value?: string;
        }) {
            const message = new StringKeyValue({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.key === "string" && this.key.length)
                writer.writeString(1, this.key);
            if (typeof this.value === "string" && this.value.length)
                writer.writeString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StringKeyValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StringKeyValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StringKeyValue {
            return StringKeyValue.deserialize(bytes);
        }
    }
    export class InstrumentationLibrary extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            version?: string;
        }) {
            const message = new InstrumentationLibrary({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                version?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.version === "string" && this.version.length)
                writer.writeString(2, this.version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InstrumentationLibrary {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InstrumentationLibrary();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InstrumentationLibrary {
            return InstrumentationLibrary.deserialize(bytes);
        }
    }
}
