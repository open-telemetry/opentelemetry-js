/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: opentelemetry/proto/resource/v1/resource.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 *  */
import * as dependency_1 from "./../../common/v1/common";
import * as pb_1 from "google-protobuf";
export namespace opentelemetry.proto.resource.v1 {
    export class Resource extends pb_1.Message {
        constructor(data?: any[] | {
            attributes?: dependency_1.opentelemetry.proto.common.v1.KeyValue[];
            dropped_attributes_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
                if ("dropped_attributes_count" in data && data.dropped_attributes_count != undefined) {
                    this.dropped_attributes_count = data.dropped_attributes_count;
                }
            }
        }
        get attributes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.opentelemetry.proto.common.v1.KeyValue, 1) as dependency_1.opentelemetry.proto.common.v1.KeyValue[];
        }
        set attributes(value: dependency_1.opentelemetry.proto.common.v1.KeyValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get dropped_attributes_count() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set dropped_attributes_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            attributes?: ReturnType<typeof dependency_1.opentelemetry.proto.common.v1.KeyValue.prototype.toObject>[];
            dropped_attributes_count?: number;
        }) {
            const message = new Resource({});
            if (data.attributes != null) {
                message.attributes = data.attributes.map(item => dependency_1.opentelemetry.proto.common.v1.KeyValue.fromObject(item));
            }
            if (data.dropped_attributes_count != null) {
                message.dropped_attributes_count = data.dropped_attributes_count;
            }
            return message;
        }
        toObject() {
            const data: {
                attributes?: ReturnType<typeof dependency_1.opentelemetry.proto.common.v1.KeyValue.prototype.toObject>[];
                dropped_attributes_count?: number;
            } = {};
            if (this.attributes != null) {
                data.attributes = this.attributes.map((item: dependency_1.opentelemetry.proto.common.v1.KeyValue) => item.toObject());
            }
            if (this.dropped_attributes_count != null) {
                data.dropped_attributes_count = this.dropped_attributes_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.attributes !== undefined)
                writer.writeRepeatedMessage(1, this.attributes, (item: dependency_1.opentelemetry.proto.common.v1.KeyValue) => item.serialize(writer));
            if (this.dropped_attributes_count !== undefined)
                writer.writeUint32(2, this.dropped_attributes_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Resource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Resource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.attributes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.opentelemetry.proto.common.v1.KeyValue.deserialize(reader), dependency_1.opentelemetry.proto.common.v1.KeyValue));
                        break;
                    case 2:
                        message.dropped_attributes_count = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Resource {
            return Resource.deserialize(bytes);
        }
    }
}
