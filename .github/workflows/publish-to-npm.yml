name: Publish packages to NPM

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  setup-and-compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 24
          registry-url: 'https://registry.npmjs.org'
      - run: npm ci --ignore-scripts
      # NOTE: in the past, we've had situations where the compiled files were missing as the `prepublishOnly` script was
      # missing in some packages. `npx lerna publish` *should* also run compile, but this is intended as a safeguard
      # when that does not happen for whatever reason.
      - run: npm run compile
      - name: Upload contents for publish
        uses: actions/upload-artifact@v4
        with:
          name: publish-cache-${{ github.run_number }}
          path: .
          include-hidden-files: true
          if-no-files-found: error
          retention-days: 10
  npm-publish:
    needs: setup-and-compile
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # to generate npm OIDC and provenance statements
    environment: npm-publish-environment
    steps:
      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 24
          registry-url: 'https://registry.npmjs.org'
      - name: Download contents for publish
        uses: actions/download-artifact@v5
        with:
          name: publish-cache-${{ github.run_number }}
      - name: Publish to npm
        env:
          NPM_CONFIG_PROVENANCE: true
        # NOTE: using --concurrency 1 to reduce the likelihood of a race when publishing,
        # which happens when the npm registry is not fully consistent yet. This can cause the publishing of a package to be
        # rejected because dependencies are not available yet. `lerna` does ensure that this is not the case locally
        # (packages are in-fact published in the correct order), but the race on the registry still applies.
        # If this happens, run the workflow again - there should be enough time for everything to settle until this workflow
        # attempts to publish again.
        run: npx lerna publish --concurrency 1 from-package --no-push --no-private --no-git-tag-version --no-verify-access --dist-tag=latest --yes
