// @generated by protobuf-ts 2.9.0 with parameter long_type_string,generate_dependencies,ts_nocheck
// @generated from protobuf file "test/fixtures/grpc-test.proto" (package "pkg_test", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message pkg_test.TestRequest
 */
export interface TestRequest {
    /**
     * @generated from protobuf field: int32 num = 1;
     */
    num: number;
}
/**
 * @generated from protobuf message pkg_test.TestReply
 */
export interface TestReply {
    /**
     * @generated from protobuf field: int32 num = 1;
     */
    num: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class TestRequest$Type extends MessageType<TestRequest> {
    constructor() {
        super("pkg_test.TestRequest", [
            { no: 1, name: "num", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestRequest>): TestRequest {
        const message = { num: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestRequest): TestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 num */ 1:
                    message.num = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 num = 1; */
        if (message.num !== 0)
            writer.tag(1, WireType.Varint).int32(message.num);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pkg_test.TestRequest
 */
export const TestRequest = new TestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestReply$Type extends MessageType<TestReply> {
    constructor() {
        super("pkg_test.TestReply", [
            { no: 1, name: "num", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestReply>): TestReply {
        const message = { num: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestReply): TestReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 num */ 1:
                    message.num = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 num = 1; */
        if (message.num !== 0)
            writer.tag(1, WireType.Varint).int32(message.num);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pkg_test.TestReply
 */
export const TestReply = new TestReply$Type();
/**
 * @generated ServiceType for protobuf service pkg_test.GrpcTester
 */
export const GrpcTester = new ServiceType("pkg_test.GrpcTester", [
    { name: "unaryMethodWithMetadata", options: {}, I: TestRequest, O: TestReply },
    { name: "UnaryMethod", options: {}, I: TestRequest, O: TestReply },
    { name: "camelCaseMethod", options: {}, I: TestRequest, O: TestReply },
    { name: "ClientStreamMethod", clientStreaming: true, options: {}, I: TestRequest, O: TestReply },
    { name: "ServerStreamMethod", serverStreaming: true, options: {}, I: TestRequest, O: TestReply },
    { name: "BidiStreamMethod", serverStreaming: true, clientStreaming: true, options: {}, I: TestRequest, O: TestReply }
]);
