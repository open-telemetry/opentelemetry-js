// @generated by protobuf-ts 2.9.0 with parameter long_type_string,generate_dependencies,ts_nocheck
// @generated from protobuf file "test/fixtures/grpc-test.proto" (package "pkg_test", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { GrpcTester } from "./grpc-test";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TestReply } from "./grpc-test";
import type { TestRequest } from "./grpc-test";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service pkg_test.GrpcTester
 */
export interface IGrpcTesterClient {
    /**
     * @generated from protobuf rpc: unaryMethodWithMetadata(pkg_test.TestRequest) returns (pkg_test.TestReply);
     */
    unaryMethodWithMetadata(input: TestRequest, options?: RpcOptions): UnaryCall<TestRequest, TestReply>;
    /**
     * @generated from protobuf rpc: UnaryMethod(pkg_test.TestRequest) returns (pkg_test.TestReply);
     */
    unaryMethod(input: TestRequest, options?: RpcOptions): UnaryCall<TestRequest, TestReply>;
    /**
     * @generated from protobuf rpc: camelCaseMethod(pkg_test.TestRequest) returns (pkg_test.TestReply);
     */
    camelCaseMethod(input: TestRequest, options?: RpcOptions): UnaryCall<TestRequest, TestReply>;
    /**
     * @generated from protobuf rpc: ClientStreamMethod(stream pkg_test.TestRequest) returns (pkg_test.TestReply);
     */
    clientStreamMethod(options?: RpcOptions): ClientStreamingCall<TestRequest, TestReply>;
    /**
     * @generated from protobuf rpc: ServerStreamMethod(pkg_test.TestRequest) returns (stream pkg_test.TestReply);
     */
    serverStreamMethod(input: TestRequest, options?: RpcOptions): ServerStreamingCall<TestRequest, TestReply>;
    /**
     * @generated from protobuf rpc: BidiStreamMethod(stream pkg_test.TestRequest) returns (stream pkg_test.TestReply);
     */
    bidiStreamMethod(options?: RpcOptions): DuplexStreamingCall<TestRequest, TestReply>;
}
/**
 * @generated from protobuf service pkg_test.GrpcTester
 */
export class GrpcTesterClient implements IGrpcTesterClient, ServiceInfo {
    typeName = GrpcTester.typeName;
    methods = GrpcTester.methods;
    options = GrpcTester.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: unaryMethodWithMetadata(pkg_test.TestRequest) returns (pkg_test.TestReply);
     */
    unaryMethodWithMetadata(input: TestRequest, options?: RpcOptions): UnaryCall<TestRequest, TestReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TestRequest, TestReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UnaryMethod(pkg_test.TestRequest) returns (pkg_test.TestReply);
     */
    unaryMethod(input: TestRequest, options?: RpcOptions): UnaryCall<TestRequest, TestReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TestRequest, TestReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: camelCaseMethod(pkg_test.TestRequest) returns (pkg_test.TestReply);
     */
    camelCaseMethod(input: TestRequest, options?: RpcOptions): UnaryCall<TestRequest, TestReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<TestRequest, TestReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ClientStreamMethod(stream pkg_test.TestRequest) returns (pkg_test.TestReply);
     */
    clientStreamMethod(options?: RpcOptions): ClientStreamingCall<TestRequest, TestReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TestRequest, TestReply>("clientStreaming", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: ServerStreamMethod(pkg_test.TestRequest) returns (stream pkg_test.TestReply);
     */
    serverStreamMethod(input: TestRequest, options?: RpcOptions): ServerStreamingCall<TestRequest, TestReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<TestRequest, TestReply>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BidiStreamMethod(stream pkg_test.TestRequest) returns (stream pkg_test.TestReply);
     */
    bidiStreamMethod(options?: RpcOptions): DuplexStreamingCall<TestRequest, TestReply> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<TestRequest, TestReply>("duplex", this._transport, method, opt);
    }
}
